<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.y.axisRight text {
    fill: orange;
}

.y.axisLeft text {
    fill: steelblue;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.d3-tip{
  line-height: 1;
  font-weight: bold;
  padding: 12px;
  background: #98abc5;
  color: steelblue;
  border-radius: 2px;
}

.d3-tip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: #fff;
  content:"\25BC";
  position: absolute;
  text-align: center;
}

/* Style northward tooltips differently */
.d3-tip.n:after {
  margin: -1px 0 0 0;
  top: 100%;
  left: 0;
}

.rect1 {
  fill: #98abc5;
}

.rect2 {
  fill: #8a89a6;
}

.x.axis path {
  display: none;
}

form {
  position: absolute;
  left: 10px;
  top: 10px;
}


</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>

<form>
  <label><input type="radio" name="mode" value="2010" checked > 2010</label> 
  <label><input type="radio" name="mode" value="2011" checked> 2011</label>
  <label><input type="radio" name="mode" value="2012" checked> 2012</label>
  <label><input type="radio" name="mode" value="2013" checked> 2013</label>
</form>


<script>

var margin = {top: 80, right: 80, bottom: 80, left: 80},
    width = 1000 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y0 = d3.scale.linear().domain([300, 1100]).range([height, 0]),
y1 = d3.scale.linear().domain([300, 1100]).range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y0).ticks(4).orient("left");
// create right yAxis
var yAxisRight = d3.svg.axis().scale(y1).ticks(4).orient("right");

var tip = d3.tip()
          .attr("class","d3-tip")
          .offset([-10,0])
          .html(function(d){
            return "<span style = 'color:white'>" + d.gifted_total + "</span>";
          });


var tip1 = d3.tip()
          .attr("class","d3-tip")
          .offset([-10,0])
          .html(function(d){
            return "<span style = 'color:white'>" + d.black_total + "</span>";
          });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("class", "graph")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.call(tip);
svg.call(tip1);    



d3.tsv("Test_2010.tsv",type,function(error, data) {
  x.domain(data.map(function(d) { return d.SYSTEM_NAME; }));
  y0.domain([0, 1]);
  y1.domain([0, 1]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
    .attr("class", "y axis axisLeft")
    .attr("transform", "translate(0,0)")
    .call(yAxisLeft)
  .append("text")
    .attr("y", 6)
    .attr("dy", "-2em")
    .style("text-anchor", "end")
    .style("text-anchor", "end")
    .text("Percentage");

svg.append("g")
    .attr("class", "y axis axisRight")
    .attr("transform", "translate(0,0)")
    //.call(yAxisRight)
  .append("text")
    .attr("y", 6)
    .attr("dy", "-2em")
    .style("text-anchor", "end")
    .style("text-anchor", "end");
    //.text("Dollars");
  /*svg.append("g")
    .attr("class", "y axis axisRight")
    .attr("transform", "translate(" + (width) + ",0)")
    .call(yAxisRight)
  .append("text")
    .attr("y", 6)
    .attr("dy", "-2em")
    .attr("dx", "2em")
    .style("text-anchor", "end")
    .text("#");
  */
  bars = svg.selectAll(".rect").data(data).enter();
  
  bars.append("rect")
      .attr("class", "rect1")
      .attr("x", function(d) { return x(d.SYSTEM_NAME); })
      .attr("width", x.rangeBand()/2)
      .attr("y", function(d) { return y0(d.gifted_total); })
      .attr("height", function(d,i,j) { return height - y0(d.gifted_total); })
      .on('mouseover', tip.show)
      .on('mouseout',tip.hide);


  bars.append("rect")
      .attr("class", "rect2")
      .attr("x", function(d) { return x(d.SYSTEM_NAME) + x.rangeBand()/2; })
      .attr("width", x.rangeBand() / 2)
      .attr("y", function(d) { return y1(d.black_total); })
      .attr("height", function(d,i,j) { return height - y1(d.black_total); })
      .on('mouseover', tip1.show)
      .on('mouseout',tip1.hide);      
});

console.log("The append function is used!")


//change the chart according to the time
d3.selectAll("input").on("change",change);

var timeout = setTimeout(function() {
  d3.select("input[value=\"2010\"]").property("checked", true).each(change);
}, 2000);

function change(){
  /*
  reserve for the later 
  */
  clearTimeout(timeout);
  if (this.value === "2010") transition_2010();
  if (this.value === "2011") transition_2011();
  //else transitionStacked();
}

function transition_2011(){
  d3.tsv("Test_2011.tsv",type,function(error, data_2011) {
  x.domain(data_2011.map(function(d) { return d.SYSTEM_NAME; }));
  y0.domain([0, 1]);
  y1.domain([0, 1]); 
  //var svg = d3.select("body").transition();



  bars = svg.selectAll(".rect").data(data_2011).enter();
  
  bars.append("rect")
      .attr("class", "rect1")
      //.transition()
      //.delay(function(d, i) { return i * 10; })
      .attr("x", function(d) { return x(d.SYSTEM_NAME); })
      .attr("width", x.rangeBand()/2)
      .attr("y", function(d) { return y0(d.gifted_total); })
      .attr("height", function(d,i,j) { return height - y0(d.gifted_total); })
      .on('mouseover', tip.show)
      .on('mouseout',tip.hide);


  bars.append("rect")
      .attr("class", "rect2")
      .attr("x", function(d) { return x(d.SYSTEM_NAME) + x.rangeBand()/2; })
      .attr("width", x.rangeBand() / 2)
      .attr("y", function(d) { return y1(d.black_total); })
      .attr("height", function(d,i,j) { return height - y1(d.black_total); })
      .on('mouseover', tip1.show)
      .on('mouseout',tip1.hide);      


  });
  console.log("why not appear 2011?");
}

function transition_2010(){
  d3.tsv("Test_2010.tsv",type,function(error, data_2010) {
  x.domain(data_2010.map(function(d) { return d.SYSTEM_NAME; }));
  y0.domain([0, 1]);
  y1.domain([0, 1]); 

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
    .attr("class", "y axis axisLeft")
    .attr("transform", "translate(0,0)")
    .call(yAxisLeft)
  .append("text")
    .attr("y", 6)
    .attr("dy", "-2em")
    .style("text-anchor", "end")
    .style("text-anchor", "end")
    .text("Percentage");

svg.append("g")
    .attr("class", "y axis axisRight")
    .attr("transform", "translate(0,0)")
    //.call(yAxisRight)
  .append("text")
    .attr("y", 6)
    .attr("dy", "-2em")
    .style("text-anchor", "end")
    .style("text-anchor", "end");

  bars = svg.selectAll(".rect").data(data_2010).enter();



  
  
  bars.append("rect")
      .attr("class", "rect1")
      .attr("x", function(d) { return x(d.SYSTEM_NAME); })
      .attr("width", x.rangeBand()/2)
      .attr("y", function(d) { return y0(d.gifted_total); })
      .attr("height", function(d,i,j) { return height - y0(d.gifted_total); })
      .on('mouseover', tip.show)
      .on('mouseout',tip.hide);
  

  bars.append("rect")
      .attr("class", "rect2")
      .attr("x", function(d) { return x(d.SYSTEM_NAME) + x.rangeBand()/2; })
      .attr("width", x.rangeBand() / 2)
      .attr("y", function(d) { return y1(d.black_total); })
      .attr("height", function(d,i,j) { return height - y1(d.black_total); })
      .on('mouseover', tip1.show)
      .on('mouseout',tip1.hide);      


  });
  console.log("why not appear 2010?");
}

function type(d) {
  d.gifted_total = + d.gifted_total;
  //d.black_total = +d.black_total;
  //d.school_total_percentage_black_served = +d.school_total_percentage_black_served;
  return d;
  console.log("function type is used");
}

</script>

